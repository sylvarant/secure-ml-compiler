#! /bin/bash

#====================================================
# file: test.sh
#----------------------------------------------------
# - Test all examples for compilation and tests/
# By Ajhl
#====================================================

Testfold="tests"
Iterfold="interoperation"
Failfold="fails"
Logfold="log"
Compiler=./compile
Linker=./link
Outfold="out"
TestCounter=0
SuccesCounter=0

#==== newlog : spawn new log ====
function newlog
{
    local unique=$(date +"%m-%d-%H-%M-%S")
    local newlog="$Logfold/test_$unique"
    echo > $newlog
    echo "$newlog"
}

#==== logtest : log what happens for test $2 ====
function logtest
{
    echo "" >> $1
    echo "" >> $1
    echo "#==========================================#" >> $1
    echo "# Result for $2" >> $1
    echo "#==========================================#" >> $1
    echo "" >> $1
}

#==== printr : print succes or failure ====
function printr 
{
    if [[ $# -lt 0 ]];then
        exit 1;
    else
        TestCounter=$((TestCounter+1))
        if [[ $1 -ne $2 ]];then
            echo -e "\033[1;31m[FAIL]\033[0m"
        else 
            SuccesCounter=$((SuccesCounter+1))
            echo -e "\033[1;33m[PASS]\033[0m"
        fi
    fi
}


# Make Log
logname=$(newlog)
echo "== All output stored in: $logname =="
echo "== $logname ==" >>$logname

#==== Normal Tests ====
StartTime=`date +%s`
echo ">> Normal Tests <<"
echo ">> Normal Tests <<" >> $logname
for file in ${Testfold}/*.ml
do
    name=${file##*/}
    base=${name%.ml}
    logtest $logname $base
    printf "%s\n" "Testing :: $base"

    # test compilation and abort further tests if failed
    printf "  %s" "Compilation :: "
    $Compiler 0 $file >> $logname 2>&1
    res=$?
    printr $res 0
    case $res in

        0) ;;#let's move on
        
        1) printf "    %s\n" "Compilation of C code Failed !"
           continue;;

        2) printf "    %s\n" "MiniML Type Checker Failed !"
           continue;;

        3) printf "    %s\n" "MiniML Compiler Failed !"
           continue;;

        *) printf "    %s\n" "Unkown Error"

    esac

    # the specific interoperation tests for this file
    for testf in ${Testfold}/${Iterfold}/*.c
    do
        testname=${testf##*/}
        testbase=${testname%-*}
        if [[ $base =~ .*$testbase.* ]];then
            uppname=$(echo $testname | tr '[:lower:]' '[:upper:]')
            echo -e "  ==> \033[1;34m${uppname}\033[0m <== "  

            # Attempt to link - next if failure
            printf "    %s" "Linking :: "
            $Linker ${Outfold}/${base}.o ${testf} >> $logname 2>&1
            res=$?
            printr $res 0
            if [[ $res -ne 0 ]];then
                printf "    -->" 
                if [[ $res -ne 2 ]];then
                    printf "%s\n" "Could not compile  $testname!"
                fi
                continue
            fi

            # The actual test
            printf "    %s" "Execution :: "
            ./${Outfold}/${base}.bin >> $logname 2>&1 
            printr $? 0
        fi
    done
done

#==== Failure Tests ====
echo -e "\n>> Failure Tests <<"
echo ">> Failure Tests <<" >> $logname
for file in ${Testfold}/${Failfold}/*.ml
do
    testname=${file##*/}
    logtest $logname $testname
    printf "%s\n" "Testing for :: $testname"
    code=$(perl -pe "m/ERRORCODE (?<num>\d+)/; print $+{num}; exit" $file) # I don't understan perl -ne
    printf "  %s" "Compilation :: "
    $Compiler 0 $file >> $logname 2>&1
    res=$?
    printr $res $code  
     
done


#==== Final Result ====
echo -e "\n== FINAL RESULT =="

printf "%s" "  "
if [[ $SuccesCounter -ne $TestCounter ]];then
    echo -ne "\033[1;31m[$SuccesCounter]\033[0m"
else 
    echo -ne "\033[1;33m[$TestCounter]\033[0m"
fi

echo -e " of \033[1;33m[$SuccesCounter]\033[0m Tests in $(expr `date +%s` - $StartTime)(s)"

exit 0
